{"version":3,"sources":["components/styles/useBoardStyle.js","redux/board/types.js","redux/board/action.js","functions/robot/robotPlay.js","functions/win.js","components/Board.js","redux/board/reducer.js","redux/store.js","components/styles/useGameStyle.js","components/Input.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["useBoardStyle","makeStyles","theme","table","margin","borderSpacing","row","block","width","height","color","textAlign","index","MOVE","FINISH_GAME","CHANGE_PLAYER_STATE","CHANGE_DIFFICULTY","CHANGE_TURN","CHANGE_MODE","RESTART_GAME","move","column","label","type","finishGame","changeTurn","turn","randomInt","min","max","Math","floor","random","robotPlayEasy","board","col","found","i","r","c","length","j","gameOver","state","player","win_state","line","filled","emptyCells","cells","x","y","push","minmax","depth","best","gameOverAll","score","evaluate","forEach","cell","isRowFilled","isColumnFilled","isDiagonalFilled","diagonal","getTheWinner","Board","classes","useSelector","player1","player2","gameFinished","difficulty","mode","dispatch","useDispatch","setBorderStyle","borderBottom","borderRight","borderLeft","addWinner","position","details","changePlayerState","winner","playWithRobot","robotRow","robotCol","hasEmpty","includes","countOfX","filter","countOfO","indexOf","columns","diagonals","element","find","robotPlayHard","newBoard","JSON","parse","stringify","robotPlayImpossible","setTimeout","className","map","rowKey","columnKey","onClick","play2Player","style","xmlns","viewBox","id","d","transform","fill","cx","cy","initialState","name","starter","reducer","action","store","createStore","useGameStyle","game","select","display","alignItems","marginBottom","marginRight","selectsContainer","flexDirection","justifyContent","github","alignContent","marginTop","Input","withStyles","root","spacing","input","borderRadius","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","Game","props","header","NativeSelect","labelId","value","onChange","event","changeDifficulty","target","changeMode","children","Button","variant","App","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAEaA,EAAgBC,aAAW,SAACC,GAAK,MAAM,CAChDC,MAAO,CACHC,OAAQ,OACRC,cAAe,GAEnBC,IAAK,CACL,EACAC,MAAO,CACHC,MAAO,QACPC,OAAQ,QACRC,MAAO,UACPC,UAAW,UAGlB,GAAG,CAACC,MAAO,IChBCC,EAAO,OACPC,EAAc,cACdC,EAAsB,sBACtBC,EAAoB,oBACpBC,EAAc,cACdC,EAAc,cACdC,EAAe,eCAfC,EAAO,SAACd,EAAKe,EAAQC,GAC9B,MAAO,CACHC,KAAMV,EACNP,IAAKA,EACLe,OAAQA,EACRC,MAAOA,EAEf,EAEaE,EAAa,WACtB,MAAO,CACHD,KAAMT,EAEd,EAiBaW,EAAa,SAACC,GACvB,MAAO,CACHH,KAAMN,EACNS,KAAMA,EAEd,ECzCMC,EAAY,SAACC,EAAKC,GACpB,OAAOC,KAAKC,MAAOD,KAAKE,SAAWH,EAAOD,EAC9C,EAEaK,EAAgB,SAACC,GAK1B,IAJA,IAAI5B,GAAO,EACP6B,GAAO,EACPC,GAAQ,EAEHC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAIC,EAAIX,EAAU,EAAG,GACjBY,EAAIZ,EAAU,EAAG,GACrB,GAAoB,IAAhBO,EAAMI,GAAGC,GAAU,CACnBjC,EAAMgC,EACNH,EAAMI,EACNH,GAAQ,EACR,KACJ,CACJ,CAGA,IAAKA,EACD,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAMM,OAAQH,IAAK,CACnC,IAAK,IAAII,EAAI,EAAGA,EAAIP,EAAMG,GAAGG,OAAQC,IACjC,GAAoB,IAAhBP,EAAMG,GAAGI,GAAU,CACnBnC,EAAM+B,EACNF,EAAMM,EACNL,GAAQ,EACR,KACJ,CAEJ,IAAc,IAAVA,EACA,KAER,CAEJ,MAAO,CAAC9B,EAAK6B,EACjB,EAmHMO,EAAW,SAACC,EAAOC,GAYrB,IAXA,IAAMC,EAAY,CACd,CAACF,EAAM,GAAG,GAAIA,EAAM,GAAG,GAAIA,EAAM,GAAG,IACpC,CAACA,EAAM,GAAG,GAAIA,EAAM,GAAG,GAAIA,EAAM,GAAG,IACpC,CAACA,EAAM,GAAG,GAAIA,EAAM,GAAG,GAAIA,EAAM,GAAG,IACpC,CAACA,EAAM,GAAG,GAAIA,EAAM,GAAG,GAAIA,EAAM,GAAG,IACpC,CAACA,EAAM,GAAG,GAAIA,EAAM,GAAG,GAAIA,EAAM,GAAG,IACpC,CAACA,EAAM,GAAG,GAAIA,EAAM,GAAG,GAAIA,EAAM,GAAG,IACpC,CAACA,EAAM,GAAG,GAAIA,EAAM,GAAG,GAAIA,EAAM,GAAG,IACpC,CAACA,EAAM,GAAG,GAAIA,EAAM,GAAG,GAAIA,EAAM,GAAG,KAG/BN,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAGxB,IAFA,IAAIS,EAAOD,EAAUR,GACjBU,EAAS,EACJN,EAAI,EAAGA,EAAI,EAAGA,IACfK,EAAKL,KAAOG,GACZG,IAER,GAAe,IAAXA,EACA,OAAO,CACf,CACA,OAAO,CACX,EAsBMC,EAAa,SAACL,GAEhB,IADA,IAAMM,EAAQ,GACLC,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACC,IAAhBR,EAAMO,GAAGC,IACTF,EAAMG,KAAK,CAACF,EAAGC,IAI3B,OAAOF,CACX,EAEMI,EAAS,SAATA,EAAUV,EAAOW,EAAOV,GAC1B,IAAIW,EAOJ,GAJIA,EAjEI,IAgEJX,EACO,EAAE,GAAI,GAAI,KAEV,EAAE,GAAI,EAAG,KAEN,IAAVU,GAvCY,SAACX,GACjB,OAAOD,EAASC,GAhCR,IAgCyBD,EAASC,EA/BlC,EAgCZ,CAqCuBa,CAAYb,GAAQ,CACnC,IAAIc,EAnCK,SAACd,GAWd,OATID,EAASC,EArCL,GAsCI,EAEHD,EAASC,GAzCV,IA0CK,EAED,CAIhB,CAuBoBe,CAASf,GACrB,MAAO,EAAE,GAAI,EAAGc,EACpB,CAqBA,OAnBAT,EAAWL,GAAOgB,SAAQ,SAACC,GACvB,IAAIV,EAAIU,EAAK,GACTT,EAAIS,EAAK,GACbjB,EAAMO,GAAGC,GAAKP,EACd,IAAIa,EAAQJ,EAAOV,EAAOW,EAAQ,GAAIV,GACtCD,EAAMO,GAAGC,GAAK,EACdM,EAAM,GAAKP,EACXO,EAAM,GAAKN,EAjFP,IAmFAP,EACIa,EAAM,GAAKF,EAAK,KAChBA,EAAOE,GAGPA,EAAM,GAAKF,EAAK,KAChBA,EAAOE,EAEnB,IAEOF,CACX,EClPMM,EAAc,SAACvD,EAAK4B,GACtB,OAAyB,IAAlBA,EAAM5B,GAAK,IACd4B,EAAM5B,GAAK,KAAO4B,EAAM5B,GAAK,IAC7B4B,EAAM5B,GAAK,KAAO4B,EAAM5B,GAAK,EACrC,EAEMwD,EAAiB,SAACzC,EAAQa,GAC5B,OAA4B,IAArBA,EAAM,GAAGb,IACZa,EAAM,GAAGb,KAAYa,EAAM,GAAGb,IAC9Ba,EAAM,GAAGb,KAAYa,EAAM,GAAGb,EACtC,EAEM0C,EAAmB,SAACC,EAAU9B,GAChC,OAAiB,IAAb8B,EACuB,IAAhB9B,EAAM,GAAG,IACZA,EAAM,GAAG,KAAOA,EAAM,GAAG,IACzBA,EAAM,GAAG,KAAOA,EAAM,GAAG,GAEN,IAAhBA,EAAM,GAAG,IACZA,EAAM,GAAG,KAAOA,EAAM,GAAG,IACzBA,EAAM,GAAG,KAAOA,EAAM,GAAG,EAErC,EAEa+B,EAAe,SAAC/B,GACzB,GAAI2B,EAAY,EAAG3B,GACf,MAAO,CACHZ,MAAOY,EAAM,GAAG,GAChB5B,IAAK,GAGb,GAAIuD,EAAY,EAAG3B,GACf,MAAO,CACHZ,MAAOY,EAAM,GAAG,GAChB5B,IAAK,GAGb,GAAIuD,EAAY,EAAG3B,GACf,MAAO,CACHZ,MAAOY,EAAM,GAAG,GAChB5B,IAAK,GAGb,GAAIwD,EAAe,EAAG5B,GAClB,MAAO,CACHZ,MAAOY,EAAM,GAAG,GAChBb,OAAQ,GAGhB,GAAIyC,EAAe,EAAG5B,GAClB,MAAO,CACHZ,MAAOY,EAAM,GAAG,GAChBb,OAAQ,GAGhB,GAAIyC,EAAe,EAAG5B,GAClB,MAAO,CACHZ,MAAOY,EAAM,GAAG,GAChBb,OAAQ,GAGhB,GAAI0C,EAAiB,EAAG7B,GACpB,MAAO,CACHZ,MAAOY,EAAM,GAAG,GAChB8B,SAAU,GAGlB,GAAID,EAAiB,EAAG7B,GACpB,MAAO,CACHZ,MAAOY,EAAM,GAAG,GAChB8B,SAAU,GAGlB,IAAK,IAAI3B,EAAI,EAAGA,EAAIH,EAAMM,OAAQH,IAC9B,IAAK,IAAII,EAAI,EAAGA,EAAIP,EAAMG,GAAGG,OAAQC,IACjC,GAAoB,IAAhBP,EAAMG,GAAGI,GACT,OAAQ,EAIpB,MAAO,OAEX,E,OCgGeyB,EA3KD,WACV,IAAMC,EAAUnE,IAChB,EAQIoE,aAAY,SAACzB,GACb,OAAOA,CACX,IATIT,EAAK,EAALA,MACAmC,EAAO,EAAPA,QACAC,EAAO,EAAPA,QACAC,EAAY,EAAZA,aACAC,EAAU,EAAVA,WACA9C,EAAI,EAAJA,KACA+C,EAAI,EAAJA,KAIEC,EAAWC,cAEXC,EAAiB,SAAChE,EAAON,GAC3B,OAAQM,GACJ,KAAK,EACD,MAAO,CACHiE,aAAsB,IAARvE,GAAa,YAC3BwE,YAAa,aAErB,KAAK,EACD,MAAO,CACHC,WAAY,YACZD,YAAa,YACbD,aAAsB,IAARvE,GAAa,aAEnC,KAAK,EACD,MAAO,CACHuE,aAAsB,IAARvE,GAAa,YAC3ByE,WAAY,aAK5B,EAsBMC,EAAY,SAACpC,EAAQqC,GACvB,IAAMC,EAAqB,YAAXtC,EAAuByB,EAAUC,EACjDI,EH9CyB,SAAC9B,EAAQsC,GAClC,MAAO,CACH3D,KAAMR,EACN6B,OAAQA,EACRsC,QAASA,EAErB,CGwCiBC,CAAkBvC,EAAO,2BAC3BsC,GAAO,IACVE,QAAQ,KAEhB,EAEMC,EAAgB,SAAC/E,EAAKe,GACxBqD,EAAStD,EAAKd,EAAKe,EAAQgD,EAAQ/C,QACnC,IAAM8D,EAASnB,EAAa/B,GAC5B,IAAgB,IAAZkD,EACAV,EAASlD,KACM,UAAX4D,EACAJ,EAAU,YAEVA,EAAU,WACVA,EAAU,gBAEX,CACHN,EAASjD,EAAW,IACpB,IAAK6D,GAAwB,EAAdC,GAAkB,EACjC,GAAmB,SAAff,EAAuB,CAAC,IAAD,EACAvC,EAAcC,GAAM,mBAA1CoD,EAAQ,KAAEC,EAAQ,IACvB,MAAO,GAAmB,SAAff,EAAuB,CAAC,IAAD,EFhDjB,SAACtC,GAK1B,IAJA,IAAI5B,GAAO,EACPe,GAAU,EACVe,GAAQ,EAEHC,EAAI,EAAGA,EAAIH,EAAMM,OAAQH,IAAK,CACnC,IAAMmD,EAAWtD,EAAMG,GAAGoD,SAAS,GAC7BC,EAAWxD,EAAMG,GAAGsD,QAAO,SAAApF,GAAK,MAAc,MAAVA,CAAa,IAAEiC,OACnDoD,EAAW1D,EAAMG,GAAGsD,QAAO,SAAApF,GAAK,MAAc,MAAVA,CAAa,IAAEiC,OACzD,GAAIgD,EAAU,CACV,GAAiB,IAAbI,EAAgB,CAChBtF,EAAM+B,EACNhB,EAASa,EAAMG,GAAGwD,QAAQ,GAC1BzD,GAAQ,EACR,KACJ,CAAO,GAAiB,IAAbsD,EAAgB,CACvBpF,EAAM+B,EACNhB,EAASa,EAAMG,GAAGwD,QAAQ,GAC1BzD,GAAQ,EACR,KACJ,CACJ,CACJ,CAGA,IADA,IAAM0D,EAAU,CAAC,GAAI,GAAI,IAChBzD,EAAI,EAAGA,EAAIH,EAAMM,OAAQH,IAC9ByD,EAAQzD,GAAGe,KAAKlB,EAAM,GAAGG,IACzByD,EAAQzD,GAAGe,KAAKlB,EAAM,GAAGG,IACzByD,EAAQzD,GAAGe,KAAKlB,EAAM,GAAGG,IAE7B,IAAK,IAAIA,EAAI,EAAGA,EAAIyD,EAAQtD,OAAQH,IAAK,CACrC,IAAMmD,EAAWM,EAAQzD,GAAGoD,SAAS,GAC/BC,EAAWI,EAAQzD,GAAGsD,QAAO,SAAApF,GAAK,MAAc,MAAVA,CAAa,IAAEiC,OACrDoD,EAAWE,EAAQzD,GAAGsD,QAAO,SAAApF,GAAK,MAAc,MAAVA,CAAa,IAAEiC,OAC3D,GAAIgD,EAAU,CACV,GAAiB,IAAbI,EAAgB,CAChBtF,EAAMwF,EAAQzD,GAAGwD,QAAQ,GACzBxE,EAASgB,EACTD,GAAQ,EACR,KACJ,CAAO,GAAiB,IAAbsD,EAAgB,CACvBpF,EAAMwF,EAAQzD,GAAGwD,QAAQ,GACzBxE,EAASgB,EACTD,GAAQ,EACR,KACJ,CACJ,CACJ,CAGA,IADA,IAAM2D,EAAY,CAAC,GAAI,IACd1D,EAAI,EAAGA,EAAIH,EAAMM,OAAQH,IAC9B,IAAK,IAAII,EAAI,EAAGA,EAAIP,EAAMG,GAAGG,OAAQC,IAC7BJ,IAAMI,IACNsD,EAAU,GAAG3C,KAAK,CACd4C,QAAS9D,EAAMG,GAAGI,GAClBnC,IAAK+B,EACLF,IAAKM,IAEC,IAANJ,GAAiB,IAANI,GACXsD,EAAU,GAAG3C,KAAK,CACd4C,QAAS9D,EAAMG,GAAGI,GAClBnC,IAAK+B,EACLF,IAAKM,MAIN,IAANJ,GAAiB,IAANI,GAAmB,IAANA,GAAiB,IAANJ,IACpC0D,EAAU,GAAG3C,KAAK,CACd4C,QAAS9D,EAAMG,GAAGI,GAClBnC,IAAK+B,EACLF,IAAKM,IAKrB,IAAK,IAAIJ,EAAI,EAAGA,EAAI0D,EAAUvD,OAAQH,IAAK,CACvC,IAAMmD,EAAwE,IAA7DO,EAAU1D,GAAGsD,QAAO,SAAApF,GAAK,OAAsB,IAAlBA,EAAMyF,OAAa,IAAExD,OAC7DkD,EAAWK,EAAU1D,GAAGsD,QAAO,SAAApF,GAAK,MAAsB,MAAlBA,EAAMyF,OAAe,IAAExD,OAC/DoD,EAAWG,EAAU1D,GAAGsD,QAAO,SAAApF,GAAK,MAAsB,MAAlBA,EAAMyF,OAAe,IAAExD,OACrE,GAAIgD,EAAU,CACV,GAAiB,IAAbI,EAAgB,CAChB,IAAMrF,EAAQwF,EAAU1D,GAAG4D,MAAK,SAAA1F,GAAK,OAAsB,IAAlBA,EAAMyF,OAAa,IAC5D1F,EAAMC,EAAMD,IACZe,EAASd,EAAM4B,IACfC,GAAQ,EACR,KACJ,CAAO,GAAiB,IAAbsD,EAAgB,CACvB,IAAMnF,EAAQwF,EAAU1D,GAAG4D,MAAK,SAAA1F,GAAK,OAAsB,IAAlBA,EAAMyF,OAAa,IAC5D1F,EAAMC,EAAMD,IACZe,EAASd,EAAM4B,IACfC,GAAQ,EACR,KACJ,CACJ,CACJ,CAEA,OAAIA,EACO,CAAC9B,EAAKe,GAENY,EAAcC,EAE7B,CEpDuCgE,CAAchE,GAAM,mBAA1CoD,EAAQ,KAAEC,EAAQ,IACvB,MAAO,GAAmB,eAAff,EAA4B,CAAC,IAAD,EFyJhB,SAACtC,GAEhC,IADA,IAUId,EAVE+E,EAAWC,KAAKC,MAAMD,KAAKE,UAAUpE,IAClCG,EAAI,EAAGA,EAAI8D,EAAS3D,OAAQH,IACjC,IAAK,IAAII,EAAI,EAAGA,EAAI0D,EAAS9D,GAAGG,OAAQC,IACb,MAAnB0D,EAAS9D,GAAGI,GACZ0D,EAAS9D,GAAGI,IAtGhB,EAuG8B,MAAnB0D,EAAS9D,GAAGI,KACnB0D,EAAS9D,GAAGI,GAvGhB,GAiHR,OAAiB,KALjBrB,EAAOiC,EACH8C,EACAnD,EAAWmD,GAAU3D,OA9GjB,IAiHC,KAA0B,IAAbpB,EAAK,GAChBa,EAAcC,GAElBd,CAEX,CE9KuCmF,CAAoBrE,GAAM,mBAAhDoD,EAAQ,KAAEC,EAAQ,IACvB,EAEkB,IAAdD,IAAiC,IAAdC,GACnBiB,YAAW,WACP9B,EAAStD,EAAKkE,EAAUC,EAAUjB,EAAQhD,QAC1C,IAAM8D,EAASnB,EAAa/B,IACZ,IAAZkD,IACAV,EAASlD,KACM,UAAX4D,GAGAJ,EAAU,WAFVA,EAAU,YAMlBN,EAASjD,EAAW,GACxB,GAAG,IAEX,CACJ,EA+BA,OACI,uBAAOgF,UAAWtC,EAAQhE,MAAM,SAC5B,gCAEI+B,EAAMwE,KAAI,SAACpG,EAAKqG,GAAM,OAClB,oBAAIF,UAAWtC,EAAQ7D,IAAI,SAEnBA,EAAIoG,KAAI,SAACrF,EAAQuF,GAAS,OACtB,oBACIC,QAAS,WAC4B,IAA7B3E,EAAMyE,GAAQC,IAAqBrC,IACtB,UAATE,EACS,IAAT/C,GAAc2D,EAAcsB,EAAQC,GAzC5D,SAACtG,EAAKe,GACtB,GAAa,IAATK,EAAY,CACZgD,EAAStD,EAAKd,EAAKe,EAAQgD,EAAQ/C,QACnC,IAAM8D,EAASnB,EAAa/B,GACb,UAAXkD,GACAV,EAASlD,KACTwD,EAAU,WACVA,EAAU,aACS,IAAZI,IACPV,EAASlD,KACTwD,EAAU,YAEdN,EAASjD,EAAW,GACxB,KAAO,CACHiD,EAAStD,EAAKd,EAAKe,EAAQiD,EAAQhD,QACnC,IAAM8D,EAASnB,EAAa/B,GACb,UAAXkD,GACAV,EAASlD,KACTwD,EAAU,WACVA,EAAU,aACS,IAAZI,IACPV,EAASlD,KACTwD,EAAU,YAEdN,EAASjD,EAAW,GACxB,CACJ,CAiB4CqF,CAAYH,EAAQC,GAEhC,EACAG,MAAOnC,EAAegC,EAAWD,GACjCF,UAAWtC,EAAQ5D,MAAM,UApHvCe,EAwH2BD,EAvH3B,MAAVC,EAEI,qBAAK0F,MAAM,6BAA6BxG,MAAM,KAAKC,OAAO,KAAKwG,QAAQ,sBAAqB,SACxF,sBAAMC,GAAG,SAAS,YAAU,SACtBC,EAAE,oUACFC,UAAU,+BAA+BC,KAAK,cAI3C,MAAV/F,EAEH,qBAAK0F,MAAM,6BAA6BxG,MAAM,KAAKC,OAAO,KAAKwG,QAAQ,sBAAqB,SACxF,wBAAQC,GAAG,YAAY,YAAU,YAAYI,GAAG,SAASC,GAAG,SAASjF,EAAE,SAAS+E,KAAK,mBAH1F,IA2G0BT,EAAY,KArHhC,IAACtF,CA0He,KAnBgBqF,EAsB5B,OAMzB,E,QC3KMa,EAAe,CACjBtF,MAAO,CACH,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEXqC,cAAc,EACdF,QAAS,CACLoD,KAAM,WACNrC,QAAQ,EACRsC,SAAS,EACTpG,MAAO,KAEXgD,QAAS,CACLmD,KAAM,QACNrC,QAAQ,EACRsC,SAAS,EACTpG,MAAO,KAEXkD,WAAY,OACZ9C,KAAM,EACN+C,KAAM,SA+EKkD,EA5EC,WAAmC,IAAlChF,EAAK,uDAAG6E,EAAcI,EAAM,uCACzC,OAAQA,EAAOrG,MACX,KAAKV,EACD,IAAIqB,EAAQS,EAAMT,MAElB,OADAA,EAAM0F,EAAOtH,KAAKsH,EAAOvG,QAAUuG,EAAOtG,MACnC,2BACAqB,GAAK,IACRT,MAAOA,IAGf,KAAKpB,EACD,OAAO,2BACA6B,GAAK,IACR4B,cAAc,IAGtB,KAAKxD,EACD,MAAsB,YAAlB6G,EAAOhF,OACA,2BACAD,GAAK,IACR0B,QAASuD,EAAO1C,UAGb,2BACAvC,GAAK,IACR2B,QAASsD,EAAO1C,UAI5B,KAAKlE,EACD,OAAO,2BACA2B,GAAK,IACR6B,WAAYoD,EAAOpD,aAG3B,KAAKvD,EACD,OAAO,2BACA0B,GAAK,IACRjB,KAAMkG,EAAOlG,OAGrB,KAAKR,EACD,OAAO,2BACAyB,GAAK,IACR8B,KAAMmD,EAAOnD,OAGrB,KAAKtD,EACD,OAAO,2BACAwB,GAAK,IACRT,MAAO,CACH,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEXqC,cAAc,EACdF,QAAQ,2BACD1B,EAAM0B,SAAO,IAChBe,QAAQ,EACRsC,SAAS,EACTpG,MAAO,MAEXgD,QAAQ,2BACD3B,EAAM2B,SAAO,IAChBc,QAAQ,EACRsC,SAAS,EACTpG,MAAO,MAEXI,KAAM,IAGd,QACI,OAAOiB,EAEnB,EClGekF,EAFDC,YAAYH,G,QCDbI,EAAe9H,aAAW,SAACC,GAAK,MAAM,CAC/C8H,KAAM,CACFrH,UAAW,UAEfsH,OAAQ,CACNC,QAAS,OACPC,WAAY,SACZC,aAAc,IAElB9G,MAAO,CACL+G,YAAa,GAEfC,iBAAkB,CACdF,aAAc,GACdF,QAAS,OACTK,cAAe,iBACfC,eAAgB,SAChBL,WAAY,UAEhBM,OAAQ,CACJP,QAAS,OACTM,eAAgB,SAChBE,aAAc,SACdP,WAAY,SACZQ,UAAW,GAElB,GAAG,CAAC/H,MAAO,I,+BCzBCgI,EAAQC,aAAW,SAAC3I,GAAK,MAAM,CACxC4I,KAAM,CACF,YAAa,CACTH,UAAWzI,EAAM6I,QAAQ,KAGjCC,MAAO,CACHC,aAAc,EACdhE,SAAU,WACViE,gBAAiBhJ,EAAMiJ,QAAQC,WAAWC,MAC1CC,OAAQ,oBACRC,SAAU,GACVC,QAAS,sBACTC,WAAYvJ,EAAMwJ,YAAYC,OAAO,CAAC,eAAgB,eAEtDC,WAAY,CACR,gBACA,qBACA,aACA,SACA,mBACA,QACA,aACA,sBACA,mBACA,qBACFC,KAAK,KACP,UAAW,CACPZ,aAAc,EACda,YAAa,UACbC,UAAW,qCAGtB,GAjCoBlB,CAiCjBmB,KC4CWC,G,MApEF,SAACC,GACZ,IAAM/F,EAAU4D,IAChB,EAAqD3D,aAAY,SAACzB,GAChE,OAAOA,CACT,IAFQ0B,EAAO,EAAPA,QAASC,EAAO,EAAPA,QAASE,EAAU,EAAVA,WAAY9C,EAAI,EAAJA,KAAM+C,EAAI,EAAJA,KAItCC,EAAWC,cAEjB,OACE,sBAAK8B,UAAWtC,EAAQ6D,KAAK,UAC3B,oBAAIvB,UAAWtC,EAAQgG,OAAO,yBAC9B,+BACY,IAATzI,GAAc2C,EAAQoD,KACb,IAAT/F,GAAc4C,EAAQmD,KAAI,WAE7B,sBAAKhB,UAAWtC,EAAQmE,iBAAiB,UACvC,sBAAK7B,UAAWtC,EAAQ8D,OAAO,UAC7B,sBAAMxB,UAAWtC,EAAQ7C,MAAM,wBAC/B,eAAC8I,EAAA,EAAY,CACXC,QAAQ,aACRC,MAAO9F,EACPwE,MAAO,cAACJ,EAAK,IACb2B,SAAU,SAACC,GAAK,OAAK9F,ERLD,SAACF,GAC7B,MAAO,CACHjD,KAAMP,EACNwD,WAAYA,EAEpB,CQA0CiG,CAAiBD,EAAME,OAAOJ,OAAO,EAAC,UAEpE,wBAAQA,MAAO,OAAO,kBACtB,wBAAQA,MAAO,OAAO,kBACtB,wBAAQA,MAAO,aAAa,iDAIhC,sBAAK7D,UAAWtC,EAAQ8D,OAAO,UAC7B,sBAAMxB,UAAWtC,EAAQ7C,MAAM,kBAC/B,eAAC8I,EAAA,EAAY,CACXC,QAAQ,aACRC,MAAO7F,EACPuE,MAAO,cAACJ,EAAK,IACb2B,SAAU,SAACC,GAAK,OAAK9F,ERLP,SAACD,GACvB,MAAO,CACHlD,KAAML,EACNuD,KAAMA,EAEd,CQA0CkG,CAAWH,EAAME,OAAOJ,OAAO,EAAC,UAE9D,wBAAQA,MAAO,QAAQ,mBACvB,wBAAQA,MAAO,WAAW,+BAI/BJ,EAAMU,SACP,mCACGvG,EAAQe,QAAUd,EAAQc,OACzB,sCAEA,qCACE,6BAAKf,EAAQe,QAAM,UAAOf,EAAQoD,KAAI,UACtC,6BAAKnD,EAAQc,QAAM,UAAOd,EAAQmD,KAAI,aAI1C,cAACoD,EAAA,EAAM,CACLC,QAAS,YACTpK,MAAO,UACPqG,MAAO,CAAE4B,UAAW,GACpB9B,QAAS,WACPnC,ERpBD,CACHnD,KAAMJ,GQoBJ,EAAE,0BAOZ,GC7De4J,MAXf,WACI,OACI,eAAC,IAAQ,CAAClD,MAAOA,EAAM,UACnB,cAACmD,EAAA,EAAW,IACZ,cAAC,EAAI,UACD,cAAC,EAAK,QAItB,ECJeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECJAQ,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,SAM1Bb,G","file":"static/js/main.6f2eceb2.chunk.js","sourcesContent":["import {makeStyles} from \"@material-ui/styles\";\n\nexport const useBoardStyle = makeStyles((theme) => ({\n    table: {\n        margin: 'auto',\n        borderSpacing: 0,\n    },\n    row: {\n    },\n    block: {\n        width: '100px',\n        height: '100px',\n        color: '#607D8B',\n        textAlign: 'center',\n    }\n\n}), {index: 1})\n","export const MOVE = 'MOVE'\nexport const FINISH_GAME = 'FINISH_GAME'\nexport const CHANGE_PLAYER_STATE = 'CHANGE_PLAYER_STATE'\nexport const CHANGE_DIFFICULTY = 'CHANGE_DIFFICULTY'\nexport const CHANGE_TURN = 'CHANGE_TURN'\nexport const CHANGE_MODE = 'CHANGE_MODE'\nexport const RESTART_GAME = 'RESTART_GAME'\n","import {CHANGE_MODE, MOVE, RESTART_GAME} from \"./types\";\nimport {FINISH_GAME} from \"./types\";\nimport {CHANGE_PLAYER_STATE} from \"./types\";\nimport {CHANGE_DIFFICULTY} from \"./types\";\nimport {CHANGE_TURN} from \"./types\";\n\nexport const move = (row, column, label) => {\n    return {\n        type: MOVE,\n        row: row,\n        column: column,\n        label: label,\n    }\n}\n\nexport const finishGame = () => {\n    return {\n        type: FINISH_GAME,\n    }\n}\n\nexport const changePlayerState = (player, details) => {\n        return {\n            type: CHANGE_PLAYER_STATE,\n            player: player,\n            details: details\n        }\n}\n\nexport const changeDifficulty = (difficulty) => {\n    return {\n        type: CHANGE_DIFFICULTY,\n        difficulty: difficulty,\n    }\n}\n\nexport const changeTurn = (turn) => {\n    return {\n        type: CHANGE_TURN,\n        turn: turn\n    }\n}\n\nexport const changeMode = (mode) => {\n    return {\n        type: CHANGE_MODE,\n        mode: mode,\n    }\n}\n\nexport const restartGame = () => {\n    return {\n        type: RESTART_GAME,\n    }\n}\n","const randomInt = (min, max) => {\n    return Math.floor((Math.random() * max) + min);\n}\n// play random\nexport const robotPlayEasy = (board) => {\n    let row = -1\n    let col = -1\n    let found = false\n    // Try a random position\n    for (let i = 0; i < 10; i++) {\n        let r = randomInt(0, 2);\n        let c = randomInt(0, 2);\n        if (board[r][c] === 0) {\n            row = r;\n            col = c;\n            found = true;\n            break;\n        }\n    }\n\n    // If could not find a valid random position get the first valid position from the table\n    if (!found) {\n        for (let i = 0; i < board.length; i++) {\n            for (let j = 0; j < board[i].length; j++) {\n                if (board[i][j] === 0) {\n                    row = i;\n                    col = j;\n                    found = true;\n                    break;\n                }\n            }\n            if (found === true) {\n                break;\n            }\n        }\n    }\n    return [row, col]\n}\n\n// trying to win the game or stop the other player to win\n// if there is no way pick a random choose\nexport const robotPlayHard = (board) => {\n    let row = -1\n    let column = -1\n    let found = false\n    // search in rows\n    for (let i = 0; i < board.length; i++) {\n        const hasEmpty = board[i].includes(0)\n        const countOfX = board[i].filter(block => block === 'x').length\n        const countOfO = board[i].filter(block => block === 'o').length\n        if (hasEmpty) {\n            if (countOfO === 2) {\n                row = i\n                column = board[i].indexOf(0)\n                found = true\n                break\n            } else if (countOfX === 2) {\n                row = i\n                column = board[i].indexOf(0)\n                found = true\n                break\n            }\n        }\n    }\n    // search in column\n    const columns = [[], [], []]\n    for (let i = 0; i < board.length; i++) {\n        columns[i].push(board[0][i])\n        columns[i].push(board[1][i])\n        columns[i].push(board[2][i])\n    }\n    for (let i = 0; i < columns.length; i++) {\n        const hasEmpty = columns[i].includes(0)\n        const countOfX = columns[i].filter(block => block === 'x').length\n        const countOfO = columns[i].filter(block => block === 'o').length\n        if (hasEmpty) {\n            if (countOfO === 2) {\n                row = columns[i].indexOf(0)\n                column = i\n                found = true\n                break\n            } else if (countOfX === 2) {\n                row = columns[i].indexOf(0)\n                column = i\n                found = true\n                break\n            }\n        }\n    }\n    // search in Diagonals\n    const diagonals = [[], []]\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            if (i === j) {\n                diagonals[0].push({\n                    element: board[i][j],\n                    row: i,\n                    col: j\n                })\n                if (i === 1 && j === 1) {\n                    diagonals[1].push({\n                        element: board[i][j],\n                        row: i,\n                        col: j\n                    })\n                }\n            }\n            if ((i === 0 && j === 2) || (j === 0 && i === 2)) {\n                diagonals[1].push({\n                    element: board[i][j],\n                    row: i,\n                    col: j\n                })\n            }\n        }\n    }\n    for (let i = 0; i < diagonals.length; i++) {\n        const hasEmpty = diagonals[i].filter(block => block.element === 0).length !== 0\n        const countOfX = diagonals[i].filter(block => block.element === 'x').length\n        const countOfO = diagonals[i].filter(block => block.element === 'o').length\n        if (hasEmpty) {\n            if (countOfO === 2) {\n                const block = diagonals[i].find(block => block.element === 0)\n                row = block.row\n                column = block.col\n                found = true\n                break\n            } else if (countOfX === 2) {\n                const block = diagonals[i].find(block => block.element === 0)\n                row = block.row\n                column = block.col\n                found = true\n                break\n            }\n        }\n    }\n\n    if (found) {\n        return [row, column]\n    } else {\n        return robotPlayEasy(board)\n    }\n}\n\n/**\n * min max algorithm\n * **/\nlet HUMAN = -1\nlet ROBOT = +1\n\n\n/* This function tests if a specific player wins */\nconst gameOver = (state, player) => {\n    const win_state = [\n        [state[0][0], state[0][1], state[0][2]],\n        [state[1][0], state[1][1], state[1][2]],\n        [state[2][0], state[2][1], state[2][2]],\n        [state[0][0], state[1][0], state[2][0]],\n        [state[0][1], state[1][1], state[2][1]],\n        [state[0][2], state[1][2], state[2][2]],\n        [state[0][0], state[1][1], state[2][2]],\n        [state[2][0], state[1][1], state[0][2]],\n    ];\n\n    for (let i = 0; i < 8; i++) {\n        let line = win_state[i];\n        let filled = 0;\n        for (let j = 0; j < 3; j++) {\n            if (line[j] === player)\n                filled++;\n        }\n        if (filled === 3)\n            return true;\n    }\n    return false;\n}\n\n/* This function test if the human or computer wins */\nconst gameOverAll = (state) => {\n    return gameOver(state, HUMAN) || gameOver(state, ROBOT);\n}\n\n//heuristic evaluation of state\nconst evaluate = (state) => {\n    let score\n    if (gameOver(state, ROBOT)) {\n        score = +1;\n    }\n    else if (gameOver(state, HUMAN)) {\n        score = -1;\n    } else {\n        score = 0;\n    }\n\n    return score;\n}\n\nconst emptyCells = (state) => {\n    const cells = [];\n    for (let x = 0; x < 3; x++) {\n        for (let y = 0; y < 3; y++) {\n            if (state[x][y] === 0)\n                cells.push([x, y]);\n        }\n    }\n\n    return cells;\n}\n\nconst minmax = (state, depth, player) => {\n    let best\n\n    if (player === ROBOT) {\n        best = [-1, -1, -1000]\n    } else {\n        best = [-1, -1, +1000]\n    }\n    if (depth === 0 || gameOverAll(state)) {\n        let score = evaluate(state)\n        return [-1, -1, score]\n    }\n\n    emptyCells(state).forEach((cell) => {\n        let x = cell[0]\n        let y = cell[1]\n        state[x][y] = player\n        let score = minmax(state, depth - 1, -player)\n        state[x][y] = 0\n        score[0] = x\n        score[1] = y\n\n        if (player === ROBOT) {\n            if (score[2] > best[2])\n                best = score\n        }\n        else {\n            if (score[2] < best[2])\n                best = score\n        }\n    })\n\n    return best\n}\n\nexport const robotPlayImpossible = (board) => {\n    const newBoard = JSON.parse(JSON.stringify(board))\n    for (let i = 0; i < newBoard.length; i++) {\n        for (let j = 0; j < newBoard[i].length; j++) {\n            if (newBoard[i][j] === 'x'){\n                newBoard[i][j] = HUMAN\n            } else if (newBoard[i][j] === 'o'){\n                newBoard[i][j] = ROBOT\n            }\n        }\n    }\n    let move\n    move = minmax(\n        newBoard,\n        emptyCells(newBoard).length,\n        ROBOT,\n    )\n    if (move[0] === -1 || move[1] === -1){\n        return robotPlayEasy(board)\n    }\n    return move\n\n}\n","const isRowFilled = (row, board) => {\n    return board[row][0] !== 0 &&\n        board[row][0] === board[row][1] &&\n        board[row][1] === board[row][2]\n}\n\nconst isColumnFilled = (column, board) => {\n    return board[0][column] !== 0 &&\n        board[0][column] === board[1][column] &&\n        board[1][column] === board[2][column]\n}\n\nconst isDiagonalFilled = (diagonal, board) => {\n    if (diagonal === 1) {\n        return board[0][0] !== 0 &&\n            board[0][0] === board[1][1] &&\n            board[1][1] === board[2][2]\n    } else {\n        return board[2][0] !== 0 &&\n            board[2][0] === board[1][1] &&\n            board[1][1] === board[0][2]\n    }\n}\n\nexport const getTheWinner = (board) => {\n    if (isRowFilled(0, board)) {\n        return {\n            label: board[0][0],\n            row: 0,\n        }\n    }\n    if (isRowFilled(1, board)) {\n        return {\n            label: board[1][0],\n            row: 1,\n        }\n    }\n    if (isRowFilled(2, board)) {\n        return {\n            label: board[2][0],\n            row: 2,\n        }\n    }\n    if (isColumnFilled(0, board)) {\n        return {\n            label: board[0][0],\n            column: 0,\n        }\n    }\n    if (isColumnFilled(1, board)) {\n        return {\n            label: board[0][1],\n            column: 1,\n        }\n    }\n    if (isColumnFilled(2, board)) {\n        return {\n            label: board[0][2],\n            column: 2,\n        }\n    }\n    if (isDiagonalFilled(1, board)) {\n        return {\n            label: board[0][0],\n            diagonal: 1,\n        }\n    }\n    if (isDiagonalFilled(2, board)) {\n        return {\n            label: board[2][0],\n            diagonal: 2,\n        }\n    }\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            if (board[i][j] === 0){\n                return -1\n            }\n        }\n    }\n    return 'equal'\n\n}\n","import React from 'react'\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {useBoardStyle} from \"./styles/useBoardStyle\";\nimport {changePlayerState, changeTurn, finishGame, move} from \"../redux\";\nimport {robotPlayEasy, robotPlayHard, robotPlayImpossible} from \"../functions/robot/robotPlay\";\nimport {getTheWinner} from \"../functions/win\";\n\nconst Board = () => {\n    const classes = useBoardStyle()\n    const {\n        board,\n        player1,\n        player2,\n        gameFinished,\n        difficulty,\n        turn,\n        mode\n    } = useSelector((state) => {\n        return state\n    })\n    const dispatch = useDispatch()\n\n    const setBorderStyle = (index, row) => {\n        switch (index) {\n            case 0:\n                return {\n                    borderBottom: row !== 2 && '6px solid',\n                    borderRight: '3px solid'\n                }\n            case 1:\n                return {\n                    borderLeft: '3px solid',\n                    borderRight: '3px solid',\n                    borderBottom: row !== 2 && '6px solid',\n                }\n            case 2:\n                return {\n                    borderBottom: row !== 2 && '6px solid',\n                    borderLeft: '3px solid'\n                }\n            default:\n                break\n        }\n    }\n\n    const setLabel = (label) => {\n        if (label === 'x') {\n            return (\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 106.818 106.795\">\n                    <path id=\"Path_2\" data-name=\"Path 2\"\n                          d=\"M295.552,195.115a10.667,10.667,0,0,0-15.083,0l-35.136,35.136-35.115-35.136A10.667,10.667,0,0,0,195.135,210.2l35.115,35.136-35.136,35.115a10.667,10.667,0,1,0,14.821,15.345c.089-.086.176-.173.262-.262l35.136-35.115,35.115,35.115a10.667,10.667,0,0,0,15.083-15.082l-35.115-35.115,35.115-35.115a10.666,10.666,0,0,0,.04-15.085Z\"\n                          transform=\"translate(-191.858 -191.992)\" fill=\"#009688\"/>\n                </svg>\n\n            )\n        } else if (label === 'o') {\n            return (\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 106.666 106.666\">\n                    <circle id=\"Ellipse_1\" data-name=\"Ellipse 1\" cx=\"53.333\" cy=\"53.333\" r=\"53.333\" fill=\"#ffc107\"/>\n                </svg>\n            )\n\n        }\n    }\n\n    const addWinner = (player, position) => {\n        const details = player === 'player1' ? player1 : player2\n        dispatch(changePlayerState(player, {\n            ...details,\n            winner: true\n        }))\n    }\n\n    const playWithRobot = (row, column) => {\n        dispatch(move(row, column, player1.label))\n        const winner = getTheWinner(board)\n        if (winner !== -1) { // win or equal\n            dispatch(finishGame())\n            if (winner !== 'equal') {\n                addWinner('player1', winner)\n            } else {\n                addWinner('player1', winner)\n                addWinner('player2', winner)\n            }\n        } else {\n            dispatch(changeTurn(2))\n            let [robotRow, robotCol] = [-1, -1]\n            if (difficulty === 'easy') {\n                [robotRow, robotCol] = robotPlayEasy(board)\n            } else if (difficulty === 'hard') {\n                [robotRow, robotCol] = robotPlayHard(board)\n            } else if (difficulty === 'impossible'){\n                [robotRow, robotCol] = robotPlayImpossible(board)\n            }\n\n            if (robotRow !== -1 || robotCol !== -1) {\n                setTimeout(() => {\n                    dispatch(move(robotRow, robotCol, player2.label))\n                    const winner = getTheWinner(board)\n                    if (winner !== -1) { //win or equal\n                        dispatch(finishGame())\n                        if (winner !== 'equal') {\n                            addWinner('player2', winner)\n                        } else {\n                            addWinner('player1', winner)\n                            addWinner('player2', winner)\n                        }\n                    }\n                    dispatch(changeTurn(1))\n                }, 500)\n            }\n        }\n    }\n\n    const play2Player = (row, column) => {\n        if (turn === 1) {\n            dispatch(move(row, column, player1.label))\n            const winner = getTheWinner(board)\n            if (winner === 'equal') {\n                dispatch(finishGame())\n                addWinner('player1', winner)\n                addWinner('player2', winner)\n            } else if (winner !== -1) {\n                dispatch(finishGame())\n                addWinner('player1', winner)\n            }\n            dispatch(changeTurn(2))\n        } else {\n            dispatch(move(row, column, player2.label))\n            const winner = getTheWinner(board)\n            if (winner === 'equal') {\n                dispatch(finishGame())\n                addWinner('player1', winner)\n                addWinner('player2', winner)\n            } else if (winner !== -1) {\n                dispatch(finishGame())\n                addWinner('player2', winner)\n            }\n            dispatch(changeTurn(1))\n        }\n    }\n\n\n    return (\n        <table className={classes.table}>\n            <tbody>\n            {\n                board.map((row, rowKey) => (\n                    <tr className={classes.row} key={rowKey}>\n                        {\n                            row.map((column, columnKey) => (\n                                <td\n                                    onClick={() => {\n                                        if (board[rowKey][columnKey] === 0 && !gameFinished)\n                                            if (mode === 'robot') {\n                                                turn === 1 && playWithRobot(rowKey, columnKey)\n                                            } else {\n                                                play2Player(rowKey, columnKey)\n                                            }\n                                    }}\n                                    style={setBorderStyle(columnKey, rowKey)}\n                                    className={classes.block}\n                                    key={columnKey + 1000}\n                                >\n                                    {\n                                        setLabel(column)\n                                    }\n                                </td>\n                            ))\n                        }\n                    </tr>\n                ))\n            }\n            </tbody>\n        </table>\n    )\n}\n\nexport default Board\n","import {CHANGE_MODE, CHANGE_TURN, MOVE, RESTART_GAME} from \"./types\";\nimport {FINISH_GAME} from \"./types\";\nimport {CHANGE_PLAYER_STATE} from \"./types\";\nimport {CHANGE_DIFFICULTY} from \"./types\";\n\nconst initialState = {\n    board: [\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n    ],\n    gameFinished: false,\n    player1: {\n        name: 'player 1',\n        winner: false,\n        starter: true,\n        label: 'x',\n    },\n    player2: {\n        name: 'robot',\n        winner: false,\n        starter: false,\n        label: 'o',\n    },\n    difficulty: 'easy',\n    turn: 1,\n    mode: 'robot',\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case MOVE: {\n            let board = state.board\n            board[action.row][action.column] = action.label\n            return {\n                ...state,\n                board: board\n            }\n        }\n        case FINISH_GAME: {\n            return {\n                ...state,\n                gameFinished: true,\n            }\n        }\n        case CHANGE_PLAYER_STATE: {\n            if (action.player === 'player1'){\n                return {\n                    ...state,\n                    player1: action.details,\n                }\n            } else {\n                return {\n                    ...state,\n                    player2: action.details,\n                }\n            }\n        }\n        case CHANGE_DIFFICULTY: {\n            return {\n                ...state,\n                difficulty: action.difficulty,\n            }\n        }\n        case CHANGE_TURN: {\n            return {\n                ...state,\n                turn: action.turn,\n            }\n        }\n        case CHANGE_MODE: {\n            return {\n                ...state,\n                mode: action.mode\n            }\n        }\n        case RESTART_GAME: {\n            return {\n                ...state,\n                board: [\n                    [0, 0, 0],\n                    [0, 0, 0],\n                    [0, 0, 0],\n                ],\n                gameFinished: false,\n                player1: {\n                    ...state.player1,\n                    winner: false,\n                    starter: true,\n                    label: 'x',\n                },\n                player2: {\n                    ...state.player2,\n                    winner: false,\n                    starter: false,\n                    label: 'o',\n                },\n                turn: 1,\n            }\n        }\n        default:\n            return state\n    }\n}\n\nexport default reducer\n","import {createStore} from 'redux'\nimport reducer from \"./board/reducer\";\n\nconst store = createStore(reducer)\n\nexport default store\n","import {makeStyles} from \"@material-ui/styles\";\n\nexport const useGameStyle = makeStyles((theme) => ({\n    game: {\n        textAlign: 'center',\n    },\n    select: {\n      display: 'flex',\n        alignItems: 'center',\n        marginBottom: 16\n    },\n    label: {\n      marginRight: 8,\n    },\n    selectsContainer: {\n        marginBottom: 16,\n        display: \"flex\",\n        flexDirection: 'column-reverse',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    github: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignContent: 'center',\n        alignItems: 'center',\n        marginTop: 8\n    }\n}), {index: 1})\n","import {InputBase} from \"@material-ui/core\";\nimport {withStyles} from \"@material-ui/core/styles\";\n\nexport const Input = withStyles((theme) => ({\n    root: {\n        'label + &': {\n            marginTop: theme.spacing(3),\n        },\n    },\n    input: {\n        borderRadius: 4,\n        position: 'relative',\n        backgroundColor: theme.palette.background.paper,\n        border: '1px solid #ced4da',\n        fontSize: 16,\n        padding: '10px 26px 10px 12px',\n        transition: theme.transitions.create(['border-color', 'box-shadow']),\n        // Use the system font instead of the default Roboto font.\n        fontFamily: [\n            '-apple-system',\n            'BlinkMacSystemFont',\n            '\"Segoe UI\"',\n            'Roboto',\n            '\"Helvetica Neue\"',\n            'Arial',\n            'sans-serif',\n            '\"Apple Color Emoji\"',\n            '\"Segoe UI Emoji\"',\n            '\"Segoe UI Symbol\"',\n        ].join(','),\n        '&:focus': {\n            borderRadius: 4,\n            borderColor: '#80bdff',\n            boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n        },\n    },\n}))(InputBase);\n\n","import React from \"react\";\nimport { useGameStyle } from \"./styles/useGameStyle\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, NativeSelect, Typography } from \"@material-ui/core\";\nimport {\n  changeMode,\n  changeDifficulty,\n  restartGame,\n} from \"../redux/board/action\";\nimport { Input } from \"./Input\";\nimport { CodeIcon, HeartIcon } from \"./icon\";\n\nconst Game = (props) => {\n  const classes = useGameStyle();\n  const { player1, player2, difficulty, turn, mode } = useSelector((state) => {\n    return state;\n  });\n\n  const dispatch = useDispatch();\n\n  return (\n    <div className={classes.game}>\n      <h1 className={classes.header}>Tic Tac Toe</h1>\n      <h3>\n        {turn === 1 && player1.name}\n        {turn === 2 && player2.name} turn\n      </h3>\n      <div className={classes.selectsContainer}>\n        <div className={classes.select}>\n          <span className={classes.label}>Difficulty</span>\n          <NativeSelect\n            labelId=\"difficulty\"\n            value={difficulty}\n            input={<Input />}\n            onChange={(event) => dispatch(changeDifficulty(event.target.value))}\n          >\n            <option value={\"easy\"}>easy</option>\n            <option value={\"hard\"}>hard</option>\n            <option value={\"impossible\"}>impossible (minmax algorithm)</option>\n          </NativeSelect>\n        </div>\n\n        <div className={classes.select}>\n          <span className={classes.label}>Mode</span>\n          <NativeSelect\n            labelId=\"difficulty\"\n            value={mode}\n            input={<Input />}\n            onChange={(event) => dispatch(changeMode(event.target.value))}\n          >\n            <option value={\"robot\"}>robot</option>\n            <option value={\"friendly\"}>friendly</option>\n          </NativeSelect>\n        </div>\n      </div>\n      {props.children}\n      <footer>\n        {player1.winner && player2.winner ? (\n          <h3>Draw</h3>\n        ) : (\n          <>\n            <h3>{player1.winner && `${player1.name} win`}</h3>\n            <h3>{player2.winner && `${player2.name} win`}</h3>\n          </>\n        )}\n\n        <Button\n          variant={\"contained\"}\n          color={\"primary\"}\n          style={{ marginTop: 8 }}\n          onClick={() => {\n            dispatch(restartGame());\n          }}\n        >\n          Restart\n        </Button>\n      </footer>\n    </div>\n  );\n};\nexport default Game;\n","import React from 'react'\nimport {Provider} from \"react-redux\";\nimport Board from \"./components/Board\";\nimport store from \"./redux/store\";\nimport {CssBaseline} from \"@material-ui/core\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <CssBaseline/>\n            <Game>\n                <Board/>\n            </Game>\n        </Provider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}